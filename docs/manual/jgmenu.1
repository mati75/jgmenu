.\" Automatically generated by Pandoc 2.2.1
.\"
.TH "JGMENU" "1" "19 February, 2020" "" ""
.hy
.SH NAME
.PP
jgmenu \- A simple X11 menu
.SH SYNOPSIS
.PP
jgmenu\ [\-\-no\-spawn]\ [\-\-checkout=<\f[I]tag\f[]>]\ [\-\-config\-file=<\f[I]file\f[]>]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-icon\-size=<\f[I]size\f[]>] [\-\-at\-pointer]
[\-\-hide\-on\-startup]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-simple] [\-\-vsimple] [\-\-csv\-file=<\f[I]file\f[]>]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-csv\-cmd=<\f[I]command\f[]>] [\-\-die\-when\-loaded]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-center]
.PP
Use these commands to get started
.TP
.B \f[C]jgmenu_run\f[]
Launch menu
.RS
.RE
.TP
.B \f[C]jgmenu_run\ init\f[]
Create config file ~/.config/jgmenu/jgmenurc
.RS
.RE
.TP
.B \f[C]jgmenu_run\ init\ \-i\f[]
Interactive setup
.RS
.RE
.TP
.B \f[C]man\ jgmenututorial\f[]
Step\-by\-step tutorial
.RS
.RE
.SH DESCRIPTION
.PP
\f[C]jgmenu\f[] is a simple menu for Linux/BSD.
It reads CSV menu data from a file and generates a graphical menu on an
X11 window.
.SS Fields
.PP
Each line of CSV menu data is parsed into the following fields using
comma as a field separator:
.IP "(1)" 4
description
.PD 0
.P
.PD
.IP "(2)" 4
command
.PD 0
.P
.PD
.IP "(3)" 4
icon
.PD 0
.P
.PD
.IP "(4)" 4
working directory
.PD 0
.P
.PD
.IP "(5)" 4
metadata
.PP
For example:
.IP
.nf
\f[C]
printf\ "Terminal,xterm\\nWeb\ Browser,firefox"\ |\ jgmenu\ \-\-vsimple
\f[]
.fi
.SS Special Characters at beginning of line
.TP
.B \f[C]#\f[]
Ignore line
.RS
.RE
.TP
.B \f[C]\&.\f[]
A line beginning with a dot followed by a space, will source the file
specified by the string following the dot
.RS
.RE
.TP
.B \f[C]\@\f[]
Treat as widget
.RS
.RE
.SS Special Characters in fields
.TP
.B \f[C],\f[]
As commas are used as field separators, individual fields can only
contain commas if they are triple quoted.
For example:
.RS
.PP
foo,""\[lq]^pipe(find . \-printf `%f,display %p,%p\\n')\[rq]""
.RE
.TP
.B \f[C]<\ >\ &\f[]
The description field is parsed as pango markup, so \f[C]<\f[],
\f[C]>\f[], and \f[C]&\f[] need to be escaped as \f[C]&lt;\f[],
\f[C]&gt;\f[], and \f[C]&amp;\f[] respectively.
.RS
.RE
.SS Markup
.PP
The syntax ^foo(bar) is used to carry out action \f[C]foo\f[] with
argument \f[C]bar\f[].
We refer to \f[C]bar\f[] as the \f[C]inner\ value\f[].
.PP
The following markup is supported in the \f[C]description\f[] field
.TP
.B \f[C]sep()\f[]
Define a separator.
If an inner value is provided, the separator will appear as a title.
If no inner value is provided, the separator will simply be a horizontal
line
.RS
.RE
.PP
The following markup is supported in the \f[C]command\f[] field
.TP
.B \f[C]^tag()\f[]
Define the beginning of a new menu structure node.
.RS
.PP
The lines following \f[C]^tag(whatever)\f[] will not show in the top
level menu, but can be opened by using \f[C]^checkout()\f[] or
\f[C]^root()\f[].
.IP
.nf
\f[C]
item0.0
item0.1
submenu1,^checkout(1)
submenu2,^root(2)

^tag(1)
item1.0
item1.1

^tag(2)
item2.0
item2.1
\f[]
.fi
.RE
.TP
.B \f[C]^checkout()\f[]
Open the tag specified by the inner value as a submenu in a new window
.RS
.RE
.TP
.B \f[C]^root()\f[]
Open the tag specified by the inner value in the root window, replacing
the current menu
.RS
.RE
.TP
.B \f[C]^sub()\f[]
Draw a submenu arrow.
This can be useful for creating submenus with \f[C]stay_alive=0\f[].
For example:
.RS
.IP
.nf
\f[C]
item0.0
item0.1
submenu1,^sub(echo\ "item1.0"\ |\ jgmenu\ \-\-simple)
\f[]
.fi
.RE
.TP
.B \f[C]^back()\f[]
Check\-out parent menu
.RS
.RE
.TP
.B \f[C]^term()\f[]
Run program in terminal
.RS
.RE
.TP
.B \f[C]^pipe()\f[]
Execute sub\-process and checkout a menu based on its stdout.
.RS
.RE
.TP
.B \f[C]^filter()\f[]
Invoke search
.RS
.RE
.SS Icons
.PP
Icons will be displayed if the third field is populated, for example:
.IP
.nf
\f[C]
Terminal,xterm,utilities\-terminal
Firefox,firefox,firefox
\f[]
.fi
.SH OPTIONS
.TP
.B \f[C]\-\-no\-spawn\f[]
Redirect command to stdout rather than execute it.
.RS
.RE
.TP
.B \f[C]\-\-checkout=<tag>\f[]
Checkout submenu on startup.
.RS
.RE
.TP
.B \f[C]\-\-config\-file=<file>\f[]
Read config file.
.RS
.RE
.TP
.B \f[C]\-\-icon\-size=<size>\f[]
Specify icon size (22 by default).
If set to 0, icons will not be loaded.
.RS
.RE
.TP
.B \f[C]\-\-at\-pointer\f[]
Launch menu at mouse pointer.
.RS
.RE
.TP
.B \f[C]\-\-hide\-on\-startup\f[]
Start menu is hidden state.
.RS
.RE
.TP
.B \f[C]\-\-simple\f[]
Ignore tint2 settings; Run in short\-lived mode (i.e.\ exit after mouse
click or enter/escape); read menu items from \f[C]stdin\f[].
.RS
.RE
.TP
.B \f[C]\-\-vsimple\f[]
Same as \f[C]\-\-simple\f[], but also disables icons and ignores
jgmenurc.
.RS
.RE
.TP
.B \f[C]\-\-csv\-file=<file>\f[]
Specify menu file (in jgmenu flavoured CSV format).
If file cannot be opened, input is reverted to \f[C]stdin\f[].
.RS
.RE
.TP
.B \f[C]\-\-csv\-cmd=<command>\f[]
Specify command to produce menu data, for example
\f[C]jgmenu_run\ pmenu\f[]
.RS
.RE
.TP
.B \f[C]\-\-die\-when\-loaded\f[]
Open menu and then exit(0).
Useful for debugging and testing.
.RS
.RE
.TP
.B \f[C]\-\-center\f[]
Center align menu horizontally and vertically.
.RS
.RE
.SH USER INTERFACE
.TP
.B \f[C]Up\f[], \f[C]Down\f[]
Select previous/next item
.RS
.RE
.TP
.B \f[C]Left\f[]. \f[C]Right\f[]
Move to parent/sub menu
.RS
.RE
.TP
.B \f[C]PgUp\f[], \f[C]PgDn\f[]
Scroll up/down
.RS
.RE
.TP
.B \f[C]Home\f[], \f[C]End\f[]
Select first/last item
.RS
.RE
.TP
.B \f[C]Enter\f[]
Select an item or open a submenu
.RS
.RE
.TP
.B \f[C]F5\f[]
Restart
.RS
.RE
.TP
.B \f[C]F8\f[]
Print node tree to stderr
.RS
.RE
.TP
.B \f[C]F9\f[]
exit(1)
.RS
.RE
.TP
.B \f[C]F10\f[]
exit(0)
.RS
.RE
.TP
.B \f[C]Backspace\f[]
Return to parent menu
.RS
.RE
.PP
Type any string to invoke a search.
Words separated by space will be searched for using \f[C]OR\f[] logic
(i.e.\ the match of either word is sufficient to display an item).
.SH WIDGETS
.PP
Lines beginning with `\@' in jgmenu flavoured CSV files are parsed in
accordance with the following syntax:
.IP
.nf
\f[C]
\@type,action,x,y,w,h,r,halign,valign,fgcol,bgcol,content
\f[]
.fi
.TP
.B \f[C]type\f[]
The widget type, which can be one of the following:
.RS
.TP
.B \f[C]rect\f[]
Rectangle with a 1px thick border drawn using \f[C]fgcol\f[]
.RS
.RE
.TP
.B \f[C]search\f[]
Search box showing the current filter (what the user has typed) or the
specifed \f[C]text\f[] if no filter has been invoked.
.RS
.RE
.TP
.B \f[C]icon\f[]
Icon
.RS
.RE
.RE
.TP
.B \f[C]action\f[]
The action to take when selected.
This can either be a shell command or a menu action such
\f[C]^root()\f[].
.RS
.RE
.TP
.B \f[C]x\f[], \f[C]y\f[]
Horizontal and vertical margin of widget
.RS
.RE
.TP
.B \f[C]w\f[], \f[C]h\f[]
Width and height of widget
.RS
.RE
.TP
.B \f[C]r\f[]
Corner radius
.RS
.RE
.TP
.B \f[C]fgcol\f[], \f[C]bgcol\f[]
Foreground and background colours using syntax \f[C]rrggbb\ #aa\f[]
\f[C]fgcol\f[] accepts \f[C]auto\f[] to use the jgmenurc's
\f[C]color_norm_fg\f[]
.RS
.RE
.TP
.B \f[C]content\f[]
\f[C]icon_path\f[] for \f[C]icon\f[] widgets \f[C]text\f[] for all other
widget types
.RS
.RE
.TP
.B \f[C]halign\f[], \f[C]valign\f[]
Horizontal and vertical alignment of widget.
This has not yet been implemented, but defaults to \f[C]top\f[] and
\f[C]left\f[]
.RS
.RE
.SH CONFIGURATION FILE
.PP
If no file is specified using the \[en]config\-file= option, the XDG
Base Directory Specification is adhered to.
I.e:
.IP \[bu] 2
Global config in \f[C]${XDG_CONFIG_DIRS:\-/etc/xdg}\f[]
.PD 0
.P
.PD
.IP \[bu] 2
User config override in \f[C]${XDG_CONFIG_HOME:\-$HOME/.config}\f[]
.PP
For most users ~/.config/jgmenu/jgmenurc is appropriate.
.PP
Global config variables are set in the following order (i.e.\ bottom of
list has higher precedence):
.IP \[bu] 2
built\-in defaults (config.c)
.PD 0
.P
.PD
.IP \[bu] 2
tint2rc config file (can be specified by \f[C]TINT2_CONFIG\f[]
environment variable)
.PD 0
.P
.PD
.IP \[bu] 2
jgmenurc config file (can be specified by \[en]config\-file=)
.PD 0
.P
.PD
.IP \[bu] 2
command line arguments
.SS Syntax
.PP
Lines beginning with \f[C]#\f[] are ignored.
.PP
All other lines are recognised as setting variables in the format
.IP
.nf
\f[C]
key\ =\ value
\f[]
.fi
.PP
White spaces are mostly ignored.
.SS Values
.PP
Unless otherwise specified, values as treated as simple strings.
.PP
Here follow some specific types:
.TP
.B \f[C]boolean\f[]
When a variable takes a boolean value, only 0 and 1 are accepted.
0 means false; 1 means true.
.RS
.RE
.TP
.B \f[C]integer\f[]
When a variable takes an integer value, only numerical values are
accepted.
The only valid characters are digits (0\-9) and minus\-sign.
All integer variables relating to geometry and position are interpreted
as pixel values unless otherwise specified.
.RS
.RE
.TP
.B \f[C]color\f[]
When a variable takes a color value, only the syntax
\f[C]#rrggbb\ aaa\f[] is recognised, where \f[C]rr\f[], \f[C]gg\f[] and
\f[C]bb\f[] represent hexadecimal values (00\-ff) for the colours red,
green and blue respectively; and \f[C]aaa\f[] stands for the alpha
channel value expressed as a percentage (0\-100) (i.e.\ 100 means no
transparency and 0 means fully transparent.) For example
\f[C]#ff0000\ 100\f[] represents red with no transparency, whereas
\f[C]#000088\ 50\f[] means dark blue with 50% transparency.
.RS
.RE
.TP
.B \f[C]pathname\f[]
When a variable takes a pathname value, it is evaluated as a string.
If the first character is tilde (~), it will be replaced by the the
environment variable $HOME just as a shell would expand it.
.RS
.RE
.SS Variables
.TP
.B \f[C]verbosity\f[] = \f[B]integer\f[] (default 0)
General verbosity: (0) warnings only; (1) basic info; (2) more info; (3)
max info
.RS
.PP
Additional specific topics: (4) IPC
.PP
Note: Some IPC messages need environment variable
\f[C]JGMENU_VERBOSITY=4\f[] too
.RE
.TP
.B \f[C]stay_alive\f[] = \f[B]boolean\f[] (default 1)
If set to 1, the menu will \[lq]hide\[rq] rather than \[lq]exit\[rq]
when the following events occur: clicking on menu item; clicking outside
the menu; pressing escape.
When in the hidden mode, a USR1 signal will \[lq]un\-hide\[rq] the menu.
.RS
.RE
.TP
.B \f[C]hide_on_startup\f[] = \f[B]boolean\f[] (default 0)
If set to 1, jgmenu start in \[lq]hidden\[rq] mode.
This is useful for starting jgmenu during the boot process and then
sending a \f[C]killall\ \-SIGUSR1\ jgmenu\f[] to show the menu.
.RS
.RE
.TP
.B \f[C]csv_cmd\f[] = \f[B]string\f[] (default \f[C]apps\f[])
Defines the command to produce the jgmenu flavoured CSV for
\f[C]jgmenu\f[].
Accpetable keyword include apps, pmenu, lx, and ob.
If a value is given other than these keywords, it will be executed in a
shell (so be careful!).
If left blank, jgmenu will read from \f[C]stdin\f[].
Examples:
.RS
.IP
.nf
\f[C]
csv_cmd\ =\ lx
csv_cmd\ =\ jgmenu_run\ lx\ \-\-no\-dirs
csv_cmd\ =\ cat\ ~/mymenu.csv
\f[]
.fi
.RE
.TP
.B \f[C]tint2_look\f[] = \f[B]boolean\f[] (default 0)
Read tint2rc and parse config options for colours,\ dimensions and
alignment.
.RS
.RE
.TP
.B \f[C]position_mode\f[] = (fixed | ipc | pointer | center) (default fixed)
Define menu positioning mode.
.RS
.TP
.B \f[C]fixed\f[]
Align to \f[C]margin_{x,y}\f[] and respect \f[C]_NET_WORKAREA\f[].
.RS
.RE
.TP
.B \f[C]ipc\f[]
Use IPC to read environment variables set by panel.
See Inter\-Process Communication for further info.
.RS
.RE
.TP
.B \f[C]pointer\f[]
Launch at pointer whilst respecting both \f[C]_NET_WORKAREA\f[] and
\f[C]edge_snap_x\f[].
.RS
.RE
.TP
.B \f[C]center\f[]
Launch at center of screen and ignore \f[C]_NET_WORKAREA\f[].
Take precedence over \f[C]menu_{v,h}align\f[].
.RS
.RE
.RE
.TP
.B \f[C]edge_snap_x\f[] = \f[B]integer\f[] (default 30)
Specify the distance (in pixles) from the left hand edge, within which
the menu will snap to the edge.
Note that this only applies in \f[C]at_pointer\f[] mode.
.RS
.RE
.TP
.B \f[C]terminal_exec\f[] = \f[B]string\f[] (default x\-terminal\-emulator)
Define terminal to use for commands with ^term() markup
.RS
.RE
.TP
.B \f[C]terminal_args\f[] = \f[B]string\f[] (default \-e)
The values of these two variables are used to build a string to launch
programs requiring a terminal to run.
With the default values, the string would become:
\f[C]x\-terminal\-emulator\ \-e\ \[aq]some_command\ with\ arguments\[aq]\f[].
\f[C]terminal_args\f[] must finish with \f[C]\-e\f[] or equivalent,
where \f[C]\-e\f[] refers to the meaning of \f[C]\-e\f[] in
\f[C]xterm\ \-e\f[].
.RS
.RE
.TP
.B \f[C]monitor\f[] = \f[B]integer\f[] (default 0)
Specify a particular monitor as an index starting from 1.
If 0, the menu will be launched on the monitor where the mouse is.
.RS
.RE
.TP
.B \f[C]hover_delay\f[] = \f[B]integer\f[] (default 100)
Time (in milliseconds) from hovering over an item until a submenu is
opened.
.RS
.RE
.TP
.B \f[C]hide_back_items\f[] = \f[B]boolean\f[] (default 1)
If enabled, all ^back() items will be suppressed.
As a general rule, it should be set to 1 for a multi\-window menu, and 0
when in single\-window mode.
.RS
.RE
.TP
.B \f[C]columns\f[] = \f[B]integer\f[] (default 1)
Number of columns in which to show menu items
.RS
.RE
.TP
.B \f[C]tabs\f[] = \f[B]integer\f[] (default 120)
Specify the position is pixels of the first tab
.RS
.RE
.TP
.B \f[C]menu_margin_x\f[] = \f[B]integer\f[] (default 0)
Distance between the menu (=X11 window) and the edge of the screen.
See note on \f[C]_NET_WORKAREA\f[] under \f[C]menu_{v,h}align\f[]
variables.
.RS
.RE
.TP
.B \f[C]menu_margin_y\f[] = \f[B]integer\f[] (default 0)
Vertical equilvalent of \f[C]menu_margin_x\f[]
.RS
.RE
.TP
.B \f[C]menu_width\f[] = \f[B]integer\f[] (default 200)
Minimum menu width of the menu.
The menu width will adjust to the longest item in the current (sub)menu.
If a filter is applied (e.g.\ by the user typing) the menu width will
not adjust.
.RS
.RE
.TP
.B \f[C]menu_height_min\f[] = \f[B]integer\f[] (default 0)
Set the minimum height of the root menu.
If \f[C]menu_height_min\f[] and \f[C]menu_height_max\f[] these are set
to the same value, the menu height will be fixed at that value.
If set to zero, they will be ignored.
.RS
.RE
.TP
.B \f[C]menu_height_max\f[] = \f[B]integer\f[] (default 0)
Minimum height of the root menu.
See \f[C]menu_height_min\f[]
.RS
.RE
.TP
.B \f[C]menu_height_mode\f[] = (static | dynamic) (default static)
Mode of menu height
.RS
.TP
.B \f[C]static\f[]
Height of the initial root menu will be used for any subsequent
\f[C]^root()\f[] action
.RS
.RE
.TP
.B \f[C]dynamic\f[]
Root menu height will be re\-calculated every time a new tag is opened
using \f[C]^root()\f[].
.RS
.RE
.RE
.TP
.B \f[C]menu_padding_top\f[] = \f[B]integer\f[] (default 5)
Distance between top border and item/widget
.RS
.RE
.TP
.B \f[C]menu_padding_right\f[] = \f[B]integer\f[] (default 5)
Distance between right border and item/widget
.RS
.RE
.TP
.B \f[C]menu_padding_bottom\f[] = \f[B]integer\f[] (default 5)
Distance between bottom border and item/widget
.RS
.RE
.TP
.B \f[C]menu_padding_left\f[] = \f[B]integer\f[] (default 5)
Distance between left border and item/widget
.RS
.RE
.TP
.B \f[C]menu_radius\f[] = \f[B]integer\f[] (default 1)
Radius of rounded corners of menu
.RS
.RE
.TP
.B \f[C]menu_border\f[] = \f[B]integer\f[] (default 0)
Thickness of menu border
.RS
.RE
.TP
.B \f[C]menu_halign\f[] = (left | right | center) (default left)
Horizontal alignment of menu.
If not set, jgmenu will try to guess the alignment reading
\f[C]_NET_WORKAREA\f[], which is a freedesktop EWMH root window
property.
Not all Window Managers and Panels respect \f[C]_NET_WORKAREA\f[].
The following do: openbox, xfwm4, tint2 and polybar.
The following do NOT: awesome, i3, bspwm and plank
.RS
.RE
.TP
.B \f[C]menu_valign\f[] = (top | bottom | center) (default bottom)
Vertical alignment of menu.
See \f[C]menu_halign\f[].
.RS
.RE
.TP
.B \f[C]sub_spacing\f[] = \f[B]integer\f[] (default 1)
Horizontal space between windows.
A negative value results in each submenu window overlapping its parent
window.
.RS
.RE
.TP
.B \f[C]sub_padding_top\f[] = \f[B]integer\f[] (default auto)
Same as \f[C]menu_padding_top\f[] but applies to submenu windows only.
It understands the keyword \f[C]auto\f[] which means that the smallest
of the four \f[C]menu_padding_*\f[] variables will be used.
.RS
.RE
.TP
.B \f[C]sub_padding_right\f[] = \f[B]integer\f[] (default auto)
See \f[C]sub_padding_top\f[]
.RS
.RE
.TP
.B \f[C]sub_padding_bottom\f[] = \f[B]integer\f[] (default auto)
See \f[C]sub_padding_top\f[]
.RS
.RE
.TP
.B \f[C]sub_padding_left\f[] = \f[B]integer\f[] (default auto)
See \f[C]sub_padding_top\f[]
.RS
.RE
.TP
.B \f[C]sub_hover_action\f[] = \f[B]integer\f[] (default 1)
Open submenu when hovering over item (only works in multi\-window mode).
.RS
.RE
.TP
.B \f[C]item_margin_x\f[] = \f[B]integer\f[] (default 3)
Horizontal distance between items and the edge of the menu.
.RS
.RE
.TP
.B \f[C]item_margin_y\f[] = \f[B]integer\f[] (default 3)
Vertical distance between items and the edge of the menu.
.RS
.RE
.TP
.B \f[C]item_height\f[] = \f[B]integer\f[] (default 25)
Height of menu items.
.RS
.RE
.TP
.B \f[C]item_padding_x\f[] = \f[B]integer\f[] (default 4)
Horizontal distance between item edge and its content (e.g.\ text or
icon)
.RS
.RE
.TP
.B \f[C]item_radius\f[] = \f[B]integer\f[] (default 1)
Radius of rounded corners of items
.RS
.RE
.TP
.B \f[C]item_border\f[] = \f[B]integer\f[] (default 0)
Thickness of item border
.RS
.RE
.TP
.B \f[C]item_halign\f[] = (left | right) (default left)
Horizontal alignment of menu items.
If set to \f[C]right\f[], the option \f[C]arrow_string\f[] should be
changed too.
.RS
.RE
.TP
.B \f[C]sep_height\f[] = \f[B]integer\f[] (default 5)
Height of separator without text (defined by ^sep()).
Separators with text use \f[C]item_height\f[]
.RS
.RE
.TP
.B \f[C]sep_halign\f[] = (left | center | right) (default left)
Horizontal alignment of separator text
.RS
.RE
.TP
.B \f[C]sep_markup\f[] = \f[B]string\f[] (unset by default)
If specified, \f[C]<span\ $sep_markup>foo</span>\f[] will be passed to
pango for ^sep(foo).
.RS
.PP
See the following link for pango attributes:
<https://developer.gnome.org/pango/stable/pango-Markup.html>
.PP
Keywords include (but are not limited to):
.IP \[bu] 2
font
.IP \[bu] 2
size (x\-small, small, medium, large, x\-large) \-\ style (normal,
oblique, italic)
.IP \[bu] 2
weight (ultralight, light, normal, bold, ultrabold, heavy
.IP \[bu] 2
foreground (using format #rrggbb or a colour name)
.IP \[bu] 2
underline (none, single, double)
.PP
Example:
.IP
.nf
\f[C]
sep_markup\ =\ font="Sans\ Italic\ 12"\ foreground="blue"
\f[]
.fi
.RE
.TP
.B \f[C]font\f[] = \f[B]string\f[] (unset by default)
Font description for menu items.
\f[C]font\f[] accepts a string such as \f[C]Cantarell\ 10\f[] or
\f[C]UbuntuCondensed\ 11\f[].
The font description without a specified size unit is interpreted as
\f[C]points\f[].
If \f[C]px\f[] is added, it will be read as pixels.\ Using
\[lq]points\[rq] enables consistency with other applications.
.RS
.RE
.TP
.B \f[C]font_fallback\f[] = \f[B]string\f[] (default xtg)
Same as \f[C]icon_theme_fallback\f[], except that the xsettings variable
\f[C]Gtk/FontName\f[] is read.
.RS
.RE
.TP
.B \f[C]icon_size\f[] = \f[B]integer\f[] (default 22)
Size of icons in pixels.
If set to 0, icons will be disabled.
.RS
.RE
.TP
.B \f[C]icon_text_spacing\f[] = \f[B]integer\f[] (default 10)
Distance between icon and text within a menu item
.RS
.RE
.TP
.B \f[C]icon_theme\f[] = \f[B]string\f[] (unset by default)
Name of icon theme.
E.g.
\f[C]Adwaita\f[], \f[C]breeze\f[], \f[C]Paper\f[], \f[C]Papirus\f[] and
\f[C]Numix\f[].
See \f[C]ls\ /usr/share/icons/\f[] (or similar) for available icon
themes on your system.
.RS
.RE
.TP
.B \f[C]icon_theme_fallback\f[] = \f[B]string\f[] (default xtg)
Fallback sources of the icon theme in order of precedence, where the
left\-most letter designates the source with highest precedence.
The following characters are acceptable:
\f[C]x=xsettings\ Net/IconThemeName\f[]; \f[C]t=tint2\f[];
\f[C]g=gtk3.0\f[].
\f[C]icon_theme\f[] takes priority if set.
In order to increase consistency with tint2, xsettings variables will
only be read if the tint2rc variable
\f[C]launcher_icon_theme_override\f[] is \f[C]0\f[].
.RS
.RE
.TP
.B \f[C]arrow_string\f[] = \f[B]string\f[] (default ▸)
String to be used to indicate that an item will open submenu.
See jgmenuunicode(7) for examples
.RS
.RE
.TP
.B \f[C]arrow_width\f[] = \f[B]integer\f[] (default 15)
Width allowed for \f[C]arrow_string\f[].
Set to 0 to hide arrow.
.RS
.RE
.TP
.B \f[C]color_menu_bg\f[] = \f[B]color\f[] (default #000000 100)
Background colour of menu window
.RS
.RE
.TP
.B \f[C]color_menu_border\f[] = \f[B]color\f[] (default #eeeeee 8)
Border colour of menu window
.RS
.RE
.TP
.B \f[C]color_norm_bg\f[] = \f[B]color\f[] (default #000000 0)
Background colour of menu items, except the one currently selected.
.RS
.RE
.TP
.B \f[C]color_norm_fg\f[] = \f[B]color\f[] (default #eeeeee 100)
Font (foreground) colour of menu items, except the one currently
selected.
.RS
.RE
.TP
.B \f[C]color_sel_bg\f[] = \f[B]color\f[] (default #ffffff 20)
Background color of the currently selected menu item.
.RS
.RE
.TP
.B \f[C]color_sel_fg\f[] = \f[B]color\f[] (default #eeeeee 100)
Font (foreground) color of the currently selected menu item.
.RS
.RE
.TP
.B \f[C]color_sel_border\f[] = \f[B]color\f[] (default #eeeeee 8)
Border color of the currently selected menu item.
.RS
.RE
.TP
.B \f[C]color_sep_fg\f[] = \f[B]color\f[] (default #ffffff 20)
Font (foreground) colour of seperators without text
.RS
.RE
.TP
.B \f[C]color_title_fg\f[] = \f[B]color\f[] (default #eeeeee 50)
Font (foreground) colour of separators with text.
The font colour can be overriden by \f[C]sep_markup\f[]
.RS
.RE
.TP
.B \f[C]color_title_bg\f[] = \f[B]color\f[] (default #000000 0)
Background colour of separators with text.
.RS
.RE
.TP
.B \f[C]color_title_border\f[] = \f[B]color\f[] (default #000000 0)
Border colour of separators with text.
.RS
.RE
.TP
.B \f[C]color_scroll_ind\f[] = \f[B]color\f[] (default #eeeeee 40)
Colour of scroll indicator lines (which show if there are menu items
above or below those which are visible).
.RS
.RE
.SS CSV generator variables
.PP
The following variables begin with \f[C]csv_\f[] which denotes that they
set environment variables which are used by the CSV generators.
.TP
.B \f[C]csv_name_format\f[] = \f[B]string\f[] (default \f[C]%n\ (%g)\f[])
Defines the format of the \f[C]name\f[] field for CSV generators.
Supported by apps and lx.
It understands the following two fields:
.RS
.TP
.B \f[C]%n\f[]
Application name
.RS
.RE
.TP
.B \f[C]%g\f[]
Application generic name.
If a \f[C]generic\ name\f[] does not exist or is the same as the
\f[C]name\f[], \f[C]%n\f[] will be used without any formatting.
.RS
.RE
.RE
.TP
.B \f[C]csv_single_window\f[] = \f[B]boolean\f[] (default 0)
If set, csv\-generators will output ^root() instead of ^checkout().
This results in a single window menu, where submenus appear in the same
window.
This is supported by apps and pmenu.
.RS
.RE
.TP
.B \f[C]csv_no_dirs\f[] = \f[B]boolean\f[] (default 0)
If set, csv\-generators will output applications without any director
structure.
This is supported by apps, pmenu and lx.
.RS
.RE
.TP
.B \f[C]csv_i18n\f[] = \f[B]string\f[] (no default)
Look for a translation file in the specified file or directory.
See `jgmenu\-i18n(1) for further details.
Supported by apps and ob.
.RS
.RE
.TP
.B \f[C]csv_no_duplicates\f[] = \f[B]boolean\f[] (default 0)
Restrict applications to appear in one directory only.
Supported by apps.
.RS
.RE
.SH Inter\-Process Communication (IPC)
.PP
IPC can be used to align jgmenu to a panel launcher in real\-time.
This is currently supported by tint2 and xfce\-panel.
It works as follows:
.PP
\f[C]jgmenu_run\f[] reads the environment variables listed below and
passes them via a unix socket to the long\-running instance of jgmenu.
.PP
If \f[C]position_mode=ipc\f[], jgmenu aligns to these variables every
times it is launched.
.PP
The following four environment variables define the extremities of the
panel: \f[C]TINT2_BUTTON_PANEL_X1\f[], \f[C]TINT2_BUTTON_PANEL_X2\f[],
\f[C]TINT2_BUTTON_PANEL_Y1\f[], \f[C]TINT2_BUTTON_PANEL_Y2\f[].
.IP
.nf
\f[C]
(X1,Y1)
╔══════════════════════╗
║\ panel\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
╚══════════════════════╝
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (X2,Y2)
\f[]
.fi
.PP
The following environment variables define the position of the launcher.
These are interpreted differently depending on panel alignment.
.PP
In the case of a horizontal panel:
.IP \[bu] 2
\f[C]TINT2_BUTTON_ALIGNED_X1\f[] and \f[C]TINT2_BUTTON_ALIGNED_X2\f[]
define the launcher button's horizontal extremities to align to.
.IP \[bu] 2
\f[C]TINT2_BUTTON_ALIGNED_Y1\f[] and \f[C]TINT2_BUTTON_ALIGNED_Y2\f[]
define the edge of the panel to align to.
These shall be the same.
.PP
In the case or a vertical panel, the same rules apply with X and Y
reversed.
.PP
If the above variables are not set, \f[C]menu_margin_x\f[] and
\f[C]menu_margin_y\f[] are used.
.SH DIAGRAMS
.SS General Notes
.TP
.B \f[C]margin\f[]
Refers to space outside an object
.RS
.RE
.TP
.B \f[C]padding\f[]
Refers to space inside an object (between border and content)
.RS
.RE
.SS Vertical Menu
.IP
.nf
\f[C]
╔════════════════════════╗
║\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ item\ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ item\ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 3\ \ \ \ \ \ \ \ \ \ \ ║
╚════════════════════════╝

1.\ menu_padding_top
2.\ item_margin_y
3.\ menu_padding_bottom
\f[]
.fi
.SS Horizontal Menu
.IP
.nf
\f[C]
╔═╤═╤════════════════╤═╤═╗
║\ │\ │\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │\ │\ ║
║\ │\ ├────────────────┤\ │\ ║
║\ │\ │icon\ \ \ text\ \ \ \ >│\ │\ ║
║\ │\ ├────────────────┤\ │\ ║
║2│1│\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │1│3║
║\ │\ ├────┬─┬───────┬─┤\ │\ ║
║\ │\ │\ 4\ \ │5│\ \ \ \ \ \ \ │6│\ │\ ║
║\ │\ ├────┴─┴───────┴─┤\ │\ ║
║\ │\ │\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │\ │\ ║
║\ │\ │\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │\ │\ ║
╚═╧═╧════════════════╧═╧═╝

1.\ item_margin_x
2.\ padding_left
3.\ padding_right
4.\ icon_size
5.\ icon_to_text_spacing
6.\ arrow_width
\f[]
.fi
.SS External to menu
.IP
.nf
\f[C]
screen
╔════════════════════════╗
║\ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
║\ ┌──────┐\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
║\ │\ root\ │\ ┌──────┐\ \ \ \ \ \ ║
║1│\ menu\ │\ │\ sub\ \ │\ \ \ \ \ \ ║
║\ │\ \ \ \ \ \ │3│\ menu\ │\ \ \ \ \ \ ║
║\ └──────┘\ │\ \ \ \ \ \ │\ \ \ \ \ \ ║
║\ \ \ \ \ \ \ \ \ \ └──────┘\ \ \ \ \ \ ║
║\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
║\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
║\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
╚════════════════════════╝

1.\ menu_margin_x
2.\ menu_margin_y
3.\ sub_spacing
\f[]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[C]jgmenu_run(1)\f[]
.IP \[bu] 2
\f[C]jgmenututorial(7)\f[]
.IP \[bu] 2
\f[C]jgmenuunicode(7)\f[]
.PP
The jgmenu source code and documentation can be downloaded from
<https://github.com/johanmalm/jgmenu/>
.SH AUTHORS
Johan Malm.
